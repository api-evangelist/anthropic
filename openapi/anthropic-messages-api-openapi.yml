openapi: 3.1.0
info:
  title: Anthropic Messages API
  description: |
    Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.
    
    The Messages API can be used for either single queries or stateless multi-turn conversations.
  version: 2023-06-01
  contact:
    name: Anthropic Support
    url: https://support.anthropic.com

servers:
  - url: https://api.anthropic.com/v1
    description: Production API server

security:
  - ApiKeyAuth: []

paths:
  /messages:
    post:
      summary: Create a message
      description: |
        Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.
      operationId: createMessage
      tags:
        - Messages
      parameters:
        - name: anthropic-version
          in: header
          required: true
          description: The version of the Claude API you want to use.
          schema:
            type: string
            example: "2023-06-01"
        - name: anthropic-beta
          in: header
          required: false
          description: Optional header to specify the beta version(s) you want to use. To use multiple betas, use a comma separated list.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
            examples:
              simple:
                summary: Simple user message
                value:
                  model: "claude-sonnet-4-5-20250929"
                  max_tokens: 1024
                  messages:
                    - role: "user"
                      content: "Hello, world"
              conversational:
                summary: Multi-turn conversation
                value:
                  model: "claude-sonnet-4-5-20250929"
                  max_tokens: 1024
                  messages:
                    - role: "user"
                      content: "Hello there."
                    - role: "assistant"
                      content: "Hi, I'm Claude. How can I help you?"
                    - role: "user"
                      content: "Can you explain LLMs in plain English?"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                content:
                  - citations: null
                    text: "Hi! My name is Claude."
                    type: "text"
                id: "msg_013Zva2CMHLNnXjNJJKqJ2EF"
                model: "claude-sonnet-4-5-20250929"
                role: "assistant"
                stop_reason: "end_turn"
                stop_sequence: null
                type: "message"
                usage:
                  input_tokens: 2095
                  output_tokens: 503
        '4XX':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/count_tokens:
    post:
      summary: Count message tokens
      description: |
        Count the number of tokens in a Message, including tools, images, and documents, without creating it.
        
        The Token Count API can be used to count the number of tokens in a Message without actually creating it.
      operationId: countMessageTokens
      tags:
        - Messages
        - Tokens      
      parameters:
        - name: anthropic-version
          in: header
          required: true
          description: The version of the Claude API you want to use.
          schema:
            type: string
            example: "2023-06-01"
        - name: anthropic-beta
          in: header
          required: false
          description: Optional header to specify the beta version(s) you want to use. To use multiple betas, use a comma separated list.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTokensRequest'
            examples:
              simple:
                summary: Count tokens for a simple message
                value:
                  model: "claude-3-7-sonnet-20250219"
                  messages:
                    - role: "user"
                      content: "Hello, world"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountTokensResponse'
              example:
                input_tokens: 2095
        '4XX':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: Your unique API key for authentication. Get your API key through the Console.

  schemas:
    CountTokensRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: The model that will complete your prompt.
          minLength: 1
          maxLength: 256
          example: "claude-3-7-sonnet-20250219"
        messages:
          type: array
          description: Input messages with alternating user and assistant conversational turns.
          maxItems: 100000
          items:
            $ref: '#/components/schemas/InputMessage'
        system:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum: [text]
                  text:
                    type: string
          description: System prompt providing context and instructions to Claude.
          example: "Today's date is 2024-06-01."
        tool_choice:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum: [auto]
              description: The model will automatically decide whether to use tools.
            - type: object
              properties:
                type:
                  type: string
                  enum: [any]
              description: The model must use one of the provided tools.
            - type: object
              properties:
                type:
                  type: string
                  enum: [tool]
                name:
                  type: string
              required: [type, name]
              description: The model must use the specified tool.
            - type: object
              properties:
                type:
                  type: string
                  enum: [none]
              description: The model must not use tools.
          description: How the model should use the provided tools.
        tools:
          type: array
          description: Definitions of tools that the model may use.
          items:
            $ref: '#/components/schemas/Tool'
        thinking:
          type: object
          description: Configuration for enabling Claude's extended thinking.
          properties:
            type:
              type: string
              enum: [enabled]
            budget_tokens:
              type: integer
              minimum: 1024
              description: Minimum budget of 1,024 tokens required.
        context_management:
          type: object
          nullable: true
          description: Context management configuration.
          properties:
            clear_function_results:
              type: boolean
              description: Whether to clear function results.
        mcp_servers:
          type: array
          description: MCP servers to be utilized in this request.
          maxItems: 20
          items:
            type: object
            properties:
              url:
                type: string
                description: URL of the MCP server.

    CountTokensResponse:
      type: object
      required:
        - input_tokens
      properties:
        input_tokens:
          type: integer
          description: The total number of tokens across the provided list of messages, system prompt, and tools.
          example: 2095
        context_management:
          type: object
          nullable: true
          description: Information about context management applied to the message.

    CreateMessageRequest:
      type: object
      required:
        - model
        - messages
        - max_tokens
      properties:
        model:
          type: string
          description: The model that will complete your prompt.
          minLength: 1
          maxLength: 256
          example: "claude-sonnet-4-5-20250929"
        messages:
          type: array
          description: Input messages with alternating user and assistant conversational turns.
          maxItems: 100000
          items:
            $ref: '#/components/schemas/InputMessage'
        max_tokens:
          type: integer
          description: The maximum number of tokens to generate before stopping.
          minimum: 1
          example: 1024
        system:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum: [text]
                  text:
                    type: string
          description: System prompt providing context and instructions to Claude.
          example: "Today's date is 2024-06-01."
        temperature:
          type: number
          description: Amount of randomness injected into the response. Ranges from 0.0 to 1.0.
          minimum: 0
          maximum: 1
          default: 1.0
          example: 1
        top_k:
          type: integer
          description: Only sample from the top K options for each subsequent token.
          minimum: 0
          example: 5
        top_p:
          type: number
          description: Use nucleus sampling.
          minimum: 0
          maximum: 1
          example: 0.7
        stop_sequences:
          type: array
          description: Custom text sequences that will cause the model to stop generating.
          items:
            type: string
        stream:
          type: boolean
          description: Whether to incrementally stream the response using server-sent events.
          default: false
        metadata:
          type: object
          description: An object describing metadata about the request.
          properties:
            user_id:
              type: string
              description: An external identifier for the user who is associated with the request.
        tool_choice:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum: [auto]
              description: The model will automatically decide whether to use tools.
            - type: object
              properties:
                type:
                  type: string
                  enum: [any]
              description: The model must use one of the provided tools.
            - type: object
              properties:
                type:
                  type: string
                  enum: [tool]
                name:
                  type: string
              required: [type, name]
              description: The model must use the specified tool.
            - type: object
              properties:
                type:
                  type: string
                  enum: [none]
              description: The model must not use tools.
          description: How the model should use the provided tools.
        tools:
          type: array
          description: Definitions of tools that the model may use.
          items:
            $ref: '#/components/schemas/Tool'
        thinking:
          type: object
          description: Configuration for enabling Claude's extended thinking.
          properties:
            type:
              type: string
              enum: [enabled]
            budget_tokens:
              type: integer
              minimum: 1024
              description: Minimum budget of 1,024 tokens required.
        service_tier:
          type: string
          enum: [auto, standard_only]
          description: Determines whether to use priority capacity or standard capacity for this request.
        container:
          type: object
          description: Container parameters with skills to be loaded.
          properties:
            identifier:
              type: string
              description: Container identifier for reuse across requests.
            skills:
              type: array
              items:
                type: object
        context_management:
          type: object
          nullable: true
          description: Context management configuration.
          properties:
            clear_function_results:
              type: boolean
              description: Whether to clear function results.
        mcp_servers:
          type: array
          description: MCP servers to be utilized in this request.
          maxItems: 20
          items:
            type: object
            properties:
              url:
                type: string
                description: URL of the MCP server.

    InputMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant]
          description: The role of the message sender.
        content:
          oneOf:
            - type: string
              description: A single text content string.
            - type: array
              description: An array of content blocks.
              items:
                $ref: '#/components/schemas/ContentBlock'

    ContentBlock:
      oneOf:
        - $ref: '#/components/schemas/TextContentBlock'
        - $ref: '#/components/schemas/ImageContentBlock'
        - $ref: '#/components/schemas/ToolUseContentBlock'
        - $ref: '#/components/schemas/ToolResultContentBlock'

    TextContentBlock:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum: [text]
        text:
          type: string

    ImageContentBlock:
      type: object
      required:
        - type
        - source
      properties:
        type:
          type: string
          enum: [image]
        source:
          type: object
          required:
            - type
            - media_type
            - data
          properties:
            type:
              type: string
              enum: [base64]
            media_type:
              type: string
              enum: [image/jpeg, image/png, image/gif, image/webp]
            data:
              type: string
              description: Base64-encoded image data.

    ToolUseContentBlock:
      type: object
      required:
        - type
        - id
        - name
        - input
      properties:
        type:
          type: string
          enum: [tool_use]
        id:
          type: string
        name:
          type: string
        input:
          type: object

    ToolResultContentBlock:
      type: object
      required:
        - type
        - tool_use_id
        - content
      properties:
        type:
          type: string
          enum: [tool_result]
        tool_use_id:
          type: string
        content:
          oneOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/ContentBlock'
        is_error:
          type: boolean

    Tool:
      type: object
      required:
        - name
        - input_schema
      properties:
        name:
          type: string
          description: Name of the tool.
        description:
          type: string
          description: Optional but strongly-recommended description of the tool.
        input_schema:
          type: object
          description: JSON schema for the tool input shape.
          required:
            - type
          properties:
            type:
              type: string
              enum: [object]
            properties:
              type: object
            required:
              type: array
              items:
                type: string
      example:
        name: "get_weather"
        description: "Get the current weather in a given location"
        input_schema:
          type: "object"
          properties:
            location:
              type: "string"
              description: "The city and state, e.g. San Francisco, CA"
            unit:
              type: "string"
              description: "Unit for the output - one of (celsius, fahrenheit)"
          required: ["location"]

    Message:
      type: object
      required:
        - id
        - type
        - role
        - content
        - model
        - stop_reason
        - stop_sequence
        - usage
      properties:
        id:
          type: string
          description: Unique object identifier.
          example: "msg_013Zva2CMHLNnXjNJJKqJ2EF"
        type:
          type: string
          enum: [message]
          description: Object type. Always "message" for Messages.
        role:
          type: string
          enum: [assistant]
          description: Conversational role of the generated message. Always "assistant".
        content:
          type: array
          description: Content generated by the model.
          items:
            $ref: '#/components/schemas/ResponseContentBlock'
        model:
          type: string
          description: The model that handled the request.
          minLength: 1
          maxLength: 256
          example: "claude-sonnet-4-5-20250929"
        stop_reason:
          type: string
          nullable: true
          enum: [end_turn, max_tokens, stop_sequence, tool_use, pause_turn, refusal, model_context_window_exceeded]
          description: The reason that we stopped.
        stop_sequence:
          type: string
          nullable: true
          description: Which custom stop sequence was generated, if any.
        usage:
          $ref: '#/components/schemas/Usage'
        context_management:
          type: object
          nullable: true
          description: Information about context management strategies applied during the request.
        container:
          type: object
          nullable: true
          description: Information about the container used in this request.

    ResponseContentBlock:
      oneOf:
        - type: object
          required:
            - type
            - text
          properties:
            type:
              type: string
              enum: [text]
            text:
              type: string
            citations:
              nullable: true
        - type: object
          required:
            - type
            - thinking
          properties:
            type:
              type: string
              enum: [thinking]
            thinking:
              type: string
        - type: object
          required:
            - type
            - id
            - name
            - input
          properties:
            type:
              type: string
              enum: [tool_use]
            id:
              type: string
            name:
              type: string
            input:
              type: object

    Usage:
      type: object
      required:
        - input_tokens
        - output_tokens
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens which were used.
          example: 2095
        output_tokens:
          type: integer
          description: The number of output tokens which were used.
          example: 503
        cache_creation_input_tokens:
          type: integer
          description: The number of input tokens used to create the cache entry.
        cache_read_input_tokens:
          type: integer
          description: The number of input tokens read from the cache.

    Error:
      type: object
      required:
        - type
        - error
      properties:
        type:
          type: string
          enum: [error]
        error:
          type: object
          required:
            - type
            - message
          properties:
            type:
              type: string
              description: The type of error.
            message:
              type: string
              description: A human-readable error message.