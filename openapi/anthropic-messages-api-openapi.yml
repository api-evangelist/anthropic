openapi: 3.1.0
info:
  title: Anthropic Messages API
  description: >
    Send a structured list of input messages with text and/or image content, and
    the model will generate the next message in the conversation. The Messages
    API can be used for either single queries or stateless multi-turn
    conversations.
  version: '2025-03-05'
  contact:
    name: Anthropic Support
    url: https://support.anthropic.com
  x-logo:
    url: https://www.anthropic.com/favicon.ico
servers:
  - url: https://api.anthropic.com
    description: Production server
security:
  - ApiKeyAuth: []
paths:
  /v1/messages:
    post:
      summary: Create A Message
      description: >-
        Send a structured list of input messages with text and/or image content,
        and the model will generate the next message in the conversation.<br>
      operationId: anthropicCreatemessage
      parameters:
        - name: anthropic-beta
          in: header
          description: >
            Optional header to specify the beta version(s) you want to use. To
            use multiple betas, use a comma separated list like beta1,beta2 or
            specify the header multiple times for each beta.
          schema:
            type: array
            items:
              type: string
          style: simple
          explode: false
        - name: x-api-key
          in: header
          required: true
          description: |
            A valid API token.
          schema:
            type: string
        - name: anthropic-version
          in: header
          required: true
          description: >
            The version of the Anthropic API you want to use. Read more about
            versioning and our version history here.
          schema:
            type: string
            default: '2023-06-01'
        - name: Content-Type
          in: header
          required: true
          description: |
            The content type.
          schema:
            type: string
        - name: anthropic-dangerous-direct-browser-access
          in: header
          required: true
          description: |
            Enable CORS.
          schema:
            type: string
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
            examples:
              default:
                value:
                  model: claude-sonnet-4-20250514
                  max_tokens: 1024
                  messages:
                    - role: user
                      content: Hello, world
      responses:
        '200':
          description: Message object
          headers:
            - name: retry-after
              in: header
              description: >
                The number of seconds to wait until you can retry the request.
                Earlier retries will fail.
              schema:
                type: string
            - name: anthropic-ratelimit-requests-limit
              in: header
              description: >
                The maximum number of requests allowed within any rate limit
                period.
              schema:
                type: string
            - name: anthropic-ratelimit-requests-remaining
              in: header
              description: |
                The number of requests remaining before being rate limited.
              schema:
                type: string
            - name: anthropic-ratelimit-requests-reset
              in: header
              description: >
                The time when the request rate limit will be fully replenished,
                provided in RFC 3339 format.
              schema:
                type: string
            - name: anthropic-ratelimit-tokens-limit
              in: header
              description: >
                The maximum number of tokens allowed within any rate limit
                period.
              schema:
                type: string
            - name: anthropic-ratelimit-tokens-remaining
              in: header
              description: >
                The number of tokens remaining (rounded to the nearest thousand)
                before being rate limited.
              schema:
                type: string
            - name: anthropic-ratelimit-tokens-reset
              in: header
              description: >
                The time when the token rate limit will be fully replenished,
                provided in RFC 3339 format.
              schema:
                type: string
            - name: anthropic-ratelimit-input-tokens-limit
              in: header
              description: >
                The maximum number of input tokens allowed within any rate limit
                period.
              schema:
                type: string
            - name: anthropic-ratelimit-input-tokens-remaining
              in: header
              description: >
                The number of input tokens remaining (rounded to the nearest
                thousand) before being rate limited.
              schema:
                type: string
            - name: anthropic-ratelimit-input-tokens-reset
              in: header
              description: >
                The time when the input token rate limit will be fully
                replenished, provided in RFC 3339 format.
                        schema:
                type: string 
            - name: anthropic-ratelimit-output-tokens-limit
              in: header
              description: >
                The maximum number of output tokens allowed within any rate
                limit period.
              schema:
                type: string
            - name: anthropic-ratelimit-output-tokens-remaining
              in: header
              description: >
                The number of output tokens remaining (rounded to the nearest
                thousand) before being rate         - name: limited.
              schema:
                type: string
            - name: anthropic-ratelimit-output-tokens-reset
              in: header
              description: >
                The time when the output token rate limit will be fully
                replenished, provided in RFC 3339 format.
              schema:
                type: string
            - name: anthropic-priority-input-tokens-limit
              in: header
              description: >
                The maximum number of Priority Tier input tokens allowed within
                any rate limit period. (Priority Tier only)
              schema:
                type: string
            - name: anthropic-priority-input-tokens-remaining
              in: header
              description: >
                The number of Priority Tier input tokens remaining (rounded to
                the nearest thousand) before being rate limited. (Priority Tier
                only)
              schema:
                type: string
            - name: anthropic-priority-input-tokens-reset
              in: header
              description: >
                The time when the Priority Tier input token rate limit will be
                fully replenished, provided in RFC 3339 format. (Priority Tier
                only)
              schema:
                type: string
            - name: anthropic-priority-output-tokens-limit
              in: header
              description: >
                The maximum number of Priority Tier output tokens allowed within
                any rate limit period. (Priority Tier only)
              schema:
                type: string
            - name: anthropic-priority-output-tokens-remaining
              in: header
              description: >
                The number of Priority Tier output tokens remaining (rounded to
                the nearest thousand) before being rate limited. (Priority Tier
                only)
              schema:
                type: string
            - name: anthropic-priority-output-tokens-reset
              in: header
              description: >
                The time when the Priority Tier output token rate limit will be
                fully replenished, provided in RFC 3339 format. (Priority Tier
                only)          
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerHttpAuthentication: []
      x-api-evangelist-certified: '2025-08-14'
  /v1/messages/count_tokens:
    post:
      summary: Count Message Tokens
      description: >-
        Count the number of tokens in a Message, including tools, images, and
        documents, without creating it. The Token Count API can be used to count
        the number of tokens in a Message without creating it.<br>
      operationId: anthropicCounttokens
      parameters:
        - name: anthropic-beta
          in: header
          description: >
            Optional header to specify the beta version(s) you want to use. To
            use multiple betas, use a comma separated list like beta1,beta2 or
            specify the header multiple times for each beta.
          schema:
            type: array
            items:
              type: string
          style: simple
          explode: false
        - name: anthropic-version
          in: header
          required: true
          description: >
            The version of the Anthropic API you want to use. Read more about
            versioning and our version history here.
          schema:
            type: string
            default: '2023-06-01'
        - name: x-api-key
          in: header
          required: true
          description: |
            A valid API token.
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: |
            The content type.
          schema:
            type: string
        - name: anthropic-dangerous-direct-browser-access
          in: header
          required: true
          description: |
            Enable CORS.
          schema:
            type: string
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTokensRequest'
            examples:
              default:
                value:
                  model: claude-3-7-sonnet-20250219
                  messages:
                    - role: user
                      content: Hello, world
      responses:
        '200':
          description: Token count response
          headers:
            - name: retry-after
              in: header
              description: >
                The number of seconds to wait until you can retry the request.
                Earlier retries will fail.
              schema:
                type: string
            - name: anthropic-ratelimit-requests-limit
              in: header
              description: >
                The maximum number of requests allowed within any rate limit
                period.
              schema:
                type: string
            - name: anthropic-ratelimit-requests-remaining
              in: header
              description: |
                The number of requests remaining before being rate limited.
              schema:
                type: string
            - name: anthropic-ratelimit-requests-reset
              in: header
              description: >
                The time when the request rate limit will be fully replenished,
                provided in RFC 3339 format.
              schema:
                type: string
            - name: anthropic-ratelimit-tokens-limit
              in: header
              description: >
                The maximum number of tokens allowed within any rate limit
                period.
              schema:
                type: string
            - name: anthropic-ratelimit-tokens-remaining
              in: header
              description: >
                The number of tokens remaining (rounded to the nearest thousand)
                before being rate limited.
              schema:
                type: string
            - name: anthropic-ratelimit-tokens-reset
              in: header
              description: >
                The time when the token rate limit will be fully replenished,
                provided in RFC 3339 format.
              schema:
                type: string
            - name: anthropic-ratelimit-input-tokens-limit
              in: header
              description: >
                The maximum number of input tokens allowed within any rate limit
                period.
              schema:
                type: string
            - name: anthropic-ratelimit-input-tokens-remaining
              in: header
              description: >
                The number of input tokens remaining (rounded to the nearest
                thousand) before being rate limited.
              schema:
                type: string
            - name: anthropic-ratelimit-input-tokens-reset
              in: header
              description: >
                The time when the input token rate limit will be fully
                replenished, provided in RFC 3339 format.
                        schema:
                type: string 
            - name: anthropic-ratelimit-output-tokens-limit
              in: header
              description: >
                The maximum number of output tokens allowed within any rate
                limit period.
              schema:
                type: string
            - name: anthropic-ratelimit-output-tokens-remaining
              in: header
              description: >
                The number of output tokens remaining (rounded to the nearest
                thousand) before being rate         - name: limited.
              schema:
                type: string
            - name: anthropic-ratelimit-output-tokens-reset
              in: header
              description: >
                The time when the output token rate limit will be fully
                replenished, provided in RFC 3339 format.
              schema:
                type: string
            - name: anthropic-priority-input-tokens-limit
              in: header
              description: >
                The maximum number of Priority Tier input tokens allowed within
                any rate limit period. (Priority Tier only)
              schema:
                type: string
            - name: anthropic-priority-input-tokens-remaining
              in: header
              description: >
                The number of Priority Tier input tokens remaining (rounded to
                the nearest thousand) before being rate limited. (Priority Tier
                only)
              schema:
                type: string
            - name: anthropic-priority-input-tokens-reset
              in: header
              description: >
                The time when the Priority Tier input token rate limit will be
                fully replenished, provided in RFC 3339 format. (Priority Tier
                only)
              schema:
                type: string
            - name: anthropic-priority-output-tokens-limit
              in: header
              description: >
                The maximum number of Priority Tier output tokens allowed within
                any rate limit period. (Priority Tier only)
              schema:
                type: string
            - name: anthropic-priority-output-tokens-remaining
              in: header
              description: >
                The number of Priority Tier output tokens remaining (rounded to
                the nearest thousand) before being rate limited. (Priority Tier
                only)
              schema:
                type: string
            - name: anthropic-priority-output-tokens-reset
              in: header
              description: >
                The time when the Priority Tier output token rate limit will be
                fully replenished, provided in RFC 3339 format. (Priority Tier
                only)          
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountTokensResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerHttpAuthentication: []
      x-api-evangelist-certified: '2025-08-14'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: >
        Your unique API key for authentication. This key is required in the
        header of all API requests, to authenticate your account and access
        Anthropic's services. Get your API key through the Console. Each key is
        scoped to a Workspace.
  schemas:
    CountTokensRequest:
      type: object
      required:
        - model
        - messages
      properties:
        messages:
          type: array
          description: >
            Input messages. Our models are trained to operate on alternating
            user and assistant conversational turns. When creating a new
            Message, you specify the prior conversational turns with the
            messages parameter, and the model then generates the next Message in
            the conversation.
          maxItems: 100000
          items:
            $ref: '#/components/schemas/InputMessage'
        model:
          type: string
          description: >
            The model that will complete your prompt. See models for additional
            details and options.
          minLength: 1
          maxLength: 256
          example: claude-sonnet-4-20250514
        mcp_servers:
          type: array
          description: MCP servers to be utilized in this request
          items:
            $ref: '#/components/schemas/MCPServer'
        system:
          oneOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/SystemContent'
          description: >
            System prompt. A system prompt is a way of providing context and
            instructions to Claude, such as specifying a particular goal or
            role.
          example: Today's date is 2023-01-01.
        thinking:
          $ref: '#/components/schemas/ThinkingConfig'
        tool_choice:
          $ref: '#/components/schemas/ToolChoice'
        tools:
          type: array
          description: >
            Definitions of tools that the model may use. If you include tools in
            your API request, the model may return tool_use content blocks that
            represent the model's use of those tools.
          items:
            $ref: '#/components/schemas/Tool'
    CountTokensResponse:
      type: object
      required:
        - input_tokens
      properties:
        input_tokens:
          type: integer
          description: >
            The total number of tokens across the provided list of messages,
            system prompt, and tools.
          example: 2095
    MessageRequest:
      type: object
      required:
        - model
        - messages
        - max_tokens
      properties:
        model:
          type: string
          description: >
            The model that will complete your prompt. See models for additional
            details and options.
          minLength: 1
          maxLength: 256
          example: claude-sonnet-4-20250514
        messages:
          type: array
          description: >
            Input messages. Our models are trained to operate on alternating
            user and assistant conversational turns. When creating a new
            Message, you specify the prior conversational turns with the
            messages parameter, and the model then generates the next Message in
            the conversation.
          maxItems: 100000
          items:
            $ref: '#/components/schemas/InputMessage'
        max_tokens:
          type: integer
          description: >
            The maximum number of tokens to generate before stopping. Note that
            our models may stop before reaching this maximum. This parameter
            only specifies the absolute maximum number of tokens to generate.
          minimum: 1
          example: 1024
        container:
          type: string
          nullable: true
          description: Container identifier for reuse across requests.
        mcp_servers:
          type: array
          description: MCP servers to be utilized in this request
          items:
            $ref: '#/components/schemas/MCPServer'
        metadata:
          $ref: '#/components/schemas/Metadata'
        service_tier:
          type: string
          enum:
            - auto
            - standard_only
          description: >
            Determines whether to use priority capacity (if available) or
            standard capacity for this request. Anthropic offers different
            levels of service for your API requests.
        stop_sequences:
          type: array
          description: >
            Custom text sequences that will cause the model to stop generating.
            Our models will normally stop when they have naturally completed
            their turn, which will result in a response stop_reason of
            "end_turn".
          items:
            type: string
        stream:
          type: boolean
          description: >
            Whether to incrementally stream the response using server-sent
            events. See streaming for details.
        system:
          oneOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/SystemContent'
          description: >
            System prompt. A system prompt is a way of providing context and
            instructions to Claude, such as specifying a particular goal or
            role.
          example: Today's date is 2023-01-01.
        temperature:
          type: number
          description: >
            Amount of randomness injected into the response. Defaults to 1.0.
            Ranges from 0.0 to 1.0. Use temperature closer to 0.0 for analytical
            / multiple choice, and closer to 1.0 for creative and generative
            tasks.
          minimum: 0
          maximum: 1
          example: 1
        thinking:
          $ref: '#/components/schemas/ThinkingConfig'
        tool_choice:
          $ref: '#/components/schemas/ToolChoice'
        tools:
          type: array
          description: >
            Definitions of tools that the model may use. If you include tools in
            your API request, the model may return tool_use content blocks that
            represent the model's use of those tools.
          items:
            $ref: '#/components/schemas/Tool'
        top_k:
          type: integer
          description: >
            Only sample from the top K options for each subsequent token. Used
            to remove "long tail" low probability responses. Recommended for
            advanced use cases only. You usually only need to use temperature.
          minimum: 0
          example: 5
        top_p:
          type: number
          description: >
            Use nucleus sampling. In nucleus sampling, we compute the cumulative
            distribution over all the options for each subsequent token in
            decreasing probability order and cut it off once it reaches a
            particular probability specified by top_p. Recommended for advanced
            use cases only. You usually only need to use temperature.
          minimum: 0
          maximum: 1
          example: 0.7
    InputMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum:
            - user
            - assistant
          description: The role of the message author
        content:
          oneOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/ContentBlock'
          description: >
            The content of the message. Can be a single string or an array of
            content blocks.
    ContentBlock:
      oneOf:
        - $ref: '#/components/schemas/TextContent'
        - $ref: '#/components/schemas/ImageContent'
        - $ref: '#/components/schemas/ToolUseContent'
        - $ref: '#/components/schemas/ToolResultContent'
    TextContent:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - text
        text:
          type: string
          description: The text content
    ImageContent:
      type: object
      required:
        - type
        - source
      properties:
        type:
          type: string
          enum:
            - image
        source:
          $ref: '#/components/schemas/ImageSource'
    ImageSource:
      type: object
      required:
        - type
        - media_type
        - data
      properties:
        type:
          type: string
          enum:
            - base64
        media_type:
          type: string
          enum:
            - image/jpeg
            - image/png
            - image/gif
            - image/webp
        data:
          type: string
          format: byte
          description: Base64 encoded image data
    ToolUseContent:
      type: object
      required:
        - type
        - id
        - name
        - input
      properties:
        type:
          type: string
          enum:
            - tool_use
        id:
          type: string
          description: Unique identifier for this tool use
        name:
          type: string
          description: Name of the tool to use
        input:
          type: object
          description: Input parameters for the tool
    ToolResultContent:
      type: object
      required:
        - type
        - tool_use_id
        - content
      properties:
        type:
          type: string
          enum:
            - tool_result
        tool_use_id:
          type: string
          description: ID of the tool use this result corresponds to
        content:
          oneOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/ContentBlock'
        is_error:
          type: boolean
          description: Whether this tool result represents an error
    SystemContent:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - text
        text:
          type: string
    MCPServer:
      type: object
      description: MCP server configuration
    Metadata:
      type: object
      description: An object describing metadata about the request
      properties:
        user_id:
          type: string
          description: >-
            An external identifier for the user who is associated with the
            request
    ThinkingConfig:
      type: object
      description: >
        Configuration for enabling Claude's extended thinking. When enabled,
        responses include thinking content blocks showing Claude's thinking
        process before the final answer.
      properties:
        enabled:
          type: boolean
          description: Whether to enable extended thinking
    ToolChoice:
      oneOf:
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - auto
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - any
        - type: object
          required:
            - type
            - name
          properties:
            type:
              type: string
              enum:
                - tool
            name:
              type: string
              description: Name of the specific tool to use
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - none
    Tool:
      type: object
      required:
        - name
        - input_schema
      properties:
        name:
          type: string
          description: Name of the tool
        description:
          type: string
          description: Optional, but strongly-recommended description of the tool
        input_schema:
          type: object
          description: JSON schema for the tool input shape
          properties:
            type:
              type: string
              enum:
                - object
            properties:
              type: object
            required:
              type: array
              items:
                type: string
      example:
        name: get_weather
        description: Get the current weather in a given location
        input_schema:
          type: object
          properties:
            location:
              type: string
              description: The city and state, e.g. San Francisco, CA
            unit:
              type: string
              description: Unit for the output - one of (celsius, fahrenheit)
          required:
            - location
    MessageResponse:
      type: object
      required:
        - id
        - type
        - role
        - content
        - model
        - stop_reason
        - stop_sequence
        - usage
        - container
      properties:
        id:
          type: string
          description: >
            Unique object identifier. The format and length of IDs may change
            over time.
          example: msg_013Zva2CMHLNnXjNJJKqJ2EF
        type:
          type: string
          enum:
            - message
          default: message
          description: |
            Object type. For Messages, this is always "message".
        role:
          type: string
          enum:
            - assistant
          default: assistant
          description: >
            Conversational role of the generated message. This will always be
            "assistant".
        content:
          type: array
          description: >
            Content generated by the model. This is an array of content blocks,
            each of which has a type that determines its shape.
          items:
            $ref: '#/components/schemas/ResponseContentBlock'
          example:
            - type: text
              text: Hi! My name is Claude.
        model:
          type: string
          description: The model that handled the request
          minLength: 1
          maxLength: 256
          example: claude-sonnet-4-20250514
        stop_reason:
          type: string
          enum:
            - end_turn
            - max_tokens
            - stop_sequence
            - tool_use
            - pause_turn
            - refusal
          nullable: true
          description: >
            The reason that we stopped. This may be one the following values: -
            "end_turn": the model reached a natural stopping point -
            "max_tokens": we exceeded the requested max_tokens or the model's
            maximum - "stop_sequence": one of your provided custom
            stop_sequences was generated - "tool_use": the model invoked one or
            more tools - "pause_turn": we paused a long-running turn -
            "refusal": when streaming classifiers intervene to handle potential
            policy violations
        stop_sequence:
          type: string
          nullable: true
          description: >
            Which custom stop sequence was generated, if any. This value will be
            a non-null string if one of your custom stop sequences was
            generated.
        usage:
          $ref: '#/components/schemas/Usage'
        container:
          $ref: '#/components/schemas/ContainerInfo'
          nullable: true
    ResponseContentBlock:
      oneOf:
        - $ref: '#/components/schemas/TextContent'
        - $ref: '#/components/schemas/ThinkingContent'
        - $ref: '#/components/schemas/ToolUseContent'
        - $ref: '#/components/schemas/ServerToolUseContent'
        - $ref: '#/components/schemas/WebSearchResult'
        - $ref: '#/components/schemas/CodeExecutionResult'
        - $ref: '#/components/schemas/MCPToolUseContent'
        - $ref: '#/components/schemas/MCPToolResult'
        - $ref: '#/components/schemas/ContainerUpload'
    ThinkingContent:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - thinking
        text:
          type: string
          description: Claude's thinking process
    ServerToolUseContent:
      type: object
      required:
        - type
        - id
        - name
        - input
      properties:
        type:
          type: string
          enum:
            - server_tool_use
        id:
          type: string
        name:
          type: string
        input:
          type: object
    WebSearchResult:
      type: object
      required:
        - type
        - id
        - name
        - input
        - result
      properties:
        type:
          type: string
          enum:
            - web_search_result
        id:
          type: string
        name:
          type: string
        input:
          type: object
        result:
          type: object
    CodeExecutionResult:
      type: object
      required:
        - type
        - id
        - name
        - input
        - result
      properties:
        type:
          type: string
          enum:
            - code_execution_result
        id:
          type: string
        name:
          type: string
        input:
          type: object
        result:
          type: object
    MCPToolUseContent:
      type: object
      required:
        - type
        - id
        - name
        - input
      properties:
        type:
          type: string
          enum:
            - mcp_tool_use
        id:
          type: string
        name:
          type: string
        input:
          type: object
    MCPToolResult:
      type: object
      required:
        - type
        - id
        - name
        - input
        - result
      properties:
        type:
          type: string
          enum:
            - mcp_tool_result
        id:
          type: string
        name:
          type: string
        input:
          type: object
        result:
          type: object
    ContainerUpload:
      type: object
      required:
        - type
        - container_id
        - path
        - size
      properties:
        type:
          type: string
          enum:
            - container_upload
        container_id:
          type: string
        path:
          type: string
        size:
          type: integer
    Usage:
      type: object
      required:
        - input_tokens
        - output_tokens
      description: >
        Billing and rate-limit usage. Anthropic's API bills and rate-limits by
        token counts, as tokens represent the underlying cost to our systems.
      properties:
        input_tokens:
          type: integer
          description: Number of input tokens consumed
        output_tokens:
          type: integer
          description: Number of output tokens generated
        cache_creation_input_tokens:
          type: integer
          description: Number of tokens used for cache creation
        cache_read_input_tokens:
          type: integer
          description: Number of tokens read from cache
    ContainerInfo:
      type: object
      description: >
        Information about the container used in this request. This will be
        non-null if a container tool (e.g. code execution) was used.
      properties:
        id:
          type: string
          description: Container identifier
        status:
          type: string
          description: Container status
    Error:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          description: The type of error
        message:
          type: string
          description: A human-readable error message
